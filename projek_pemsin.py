# -*- coding: utf-8 -*-
"""Projek PEMSIN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AAv7qlU92fkElNX-NcyW094ZfK4zgW1E
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
import matplotlib.pyplot as plt

#Proses input data csv ke colab
df = pd.read_csv('hepatitis_csv.csv')
df.head()

df.info()

#Proses Penghapussan NaN
df = df.dropna()
df.head(10)

#Proses penglabelan
from sklearn import preprocessing 
le = preprocessing.LabelEncoder()

df['steroid'] = le.fit_transform(df['steroid']) 
df['antivirals'] = le.fit_transform(df['antivirals']) 
df['fatigue'] = le.fit_transform(df['fatigue']) 
df['malaise'] = le.fit_transform(df['malaise']) 
df['anorexia'] = le.fit_transform(df['anorexia']) 
df['Liver_big'] = le.fit_transform(df['Liver_big']) 
df['Liver_firm'] = le.fit_transform(df['Liver_firm']) 
df['spleen_palpable'] = le.fit_transform(df['spleen_palpable'])
df['spiders'] = le.fit_transform(df['spiders'])
df['ascites'] = le.fit_transform(df['ascites'])
df['varices'] = le.fit_transform(df['varices'])
df['varices'] = le.fit_transform(df['varices'])
df['histology'] = le.fit_transform(df['histology'])
df['kondisi'] = le.fit_transform(df['class'])

df.head()

#Memvisualisasikan kelas label dengan diagram pie
Kondisi = [ np.count_nonzero(df['kondisi']==1),np.count_nonzero(df['kondisi']==0)]
hasil = ['Tidak Kronis','Kronis']
plt.title('Hepatitis')
plt.pie(Kondisi,labels=hasil, radius=1.3, startangle=60, autopct='%.1f%%', shadow=True)
plt.show()

#proses drop data yang tidak diperlukan
df.drop (['age','sex','class'],inplace=True,axis=1)

#menambahkan fitur sebagai x dan mendefinisikan y
x = df[['steroid','antivirals','fatigue','malaise','anorexia','Liver_big','Liver_firm','spleen_palpable','spiders','ascites','varices','histology']].values
y = df['kondisi'].values

#melakukan split data training  sebesar 90% dan testing 10% dari data x yang terstandarisasi dan data y
X_train, X_test, y_train, y_test = train_test_split(x,y,test_size=0.1, random_state=0)

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()

x_train = scaler.fit_transform(X_train)
x_test = scaler.fit_transform(X_test)

LR = LogisticRegression()
LR.fit(x_train,y_train)

print ('coefficients (b) : ', LR.coef_)
print ('Intercept (a) : ',LR.intercept_)

from sklearn.metrics import accuracy_score

ypred = LR.predict(x_test)
print("Akurasi terstandarisasi ", accuracy_score(y_test, ypred)*100)

from sklearn.metrics import log_loss

yhat_prob = LR.predict_log_proba(x_test)
print ('Log Loss : ', log_loss (y_test,ypred))

from sklearn.metrics import confusion_matrix

tn,fp,fn,tp = confusion_matrix(y_test,ypred).ravel()
accuracy_score = (tn+tp)/(tn+fp+fn+tp)
print(accuracy_score)

"""**PCA**"""

from sklearn.decomposition import PCA

x_pca = df.loc[:,'steroid':'histology'].values 
x_pca

pca1 = PCA(n_components=2)

pca1.fit(x_pca)

pc = pca1.transform(x_pca)

principalDf = pd.DataFrame(data = pc , columns = ['pc1','pc2'])

df_pca = pd.concat([principalDf, df[['kondisi']]], axis = 1)

df_pca.head()

X_train, X_test, y_train, y_test = train_test_split(principalDf.values, y.ravel(), test_size=0.4, random_state=0)

LR_pca = LogisticRegression().fit(X_train,y_train)

yhat_pca = LR_pca.predict(X_test)

LR_pca.coef_

LR_pca.intercept_

#melakukan visualisasi hasil prediksi data testing
fig=plt.figure(figsize = (8,8))
a = LR_pca.intercept_
b1,b2 =LR_pca.coef_.T

#calculate intercept dan gradien 
c=-a/b2
m=-b1/b2

#
xmin,xmax=-5,5
ymin,ymax=-5,5

xd = np.array([xmin,xmax])
yd = m*xd + c                     #membuat perasamaan garis pembatasnya
plt.plot(xd,yd,'k',lw=1,ls='--')
plt.fill_between(xd, yd, ymin, color='tab:blue', alpha=0.2)
plt.fill_between(xd,yd,ymax,color='tab:orange',alpha=0.2)

color = ['g','r']

colormap = np.array([color[0],color[1]])

plt.scatter(X_test[:,0], X_test[:,1], s=50, c=colormap[y_test])
plt.xlim(xmin,xmax)
plt.ylim(ymin,ymax)
plt.ylabel(r'pc2')
plt.xlabel(r'pc1')
plt.show()

#visualisasi hasil logistic regression pada data testing tanpa menggunakan decision boundary

colors = ['g','r']

colormap =np.array([colors[0],colors[1]])
plt.scatter(X_train[:,0], X_train[:,1], s=50, c=colormap[yhat_pca])
plt.title('HASIL LOG REG ')
plt.show()